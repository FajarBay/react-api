{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\praktikan\\\\react-api\\\\src\\\\Australia.js\";\nimport React, { Component } from \"react\";\n\nclass Australia extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://randomuser.me/api/?results=6&nat=au\").then(res => res.json()).then(parsedJSON => parsedJSON.results.map(data => ({\n      id: \"\".concat(data.id.name),\n      firstName: \"\".concat(data.name.first),\n      lastName: \"\".concat(data.name.last),\n      email: \"\".concat(data.email),\n      username: \"\".concat(data.login.username),\n      password: \"\".concat(data.login.password),\n      thumbnail: \"\".concat(data.picture.large)\n    }))).then(items => this.setState({\n      items,\n      isLoaded: false\n    })).catch(error => console.log('parsing failed', error));\n  }\n\n  render() {\n    const items = this.state.items;\n    return React.createElement(\"div\", {\n      className: \"boxWhite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Random User\"), items.length > 0 ? items.map(item => {\n      const id = item.id,\n            firstName = item.firstName,\n            lastName = item.lastName,\n            email = item.email,\n            username = item.username,\n            password = item.password,\n            thumbnail = item.thumbnail;\n      return React.createElement(\"div\", {\n        key: id,\n        className: \"bgCircle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: thumbnail,\n        alt: firstName,\n        className: \"circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), \" \"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"ctr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, firstName, \" \", lastName, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), email, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), username, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), password, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })));\n    }) : null);\n  }\n\n}\n\nexport default Australia;","map":{"version":3,"sources":["C:\\Users\\praktikan\\react-api\\src\\Australia.js"],"names":["React","Component","Australia","constructor","props","state","items","componentDidMount","fetch","then","res","json","parsedJSON","results","map","data","id","name","firstName","first","lastName","last","email","username","login","password","thumbnail","picture","large","setState","isLoaded","catch","error","console","log","render","length","item"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nclass Australia extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n      fetch(\"https://randomuser.me/api/?results=6&nat=au\")\r\n        .then(res => res.json())\r\n        .then(parsedJSON => parsedJSON.results.map(data => (\r\n          {\r\n            id: `${data.id.name}`,\r\n            firstName: `${data.name.first}`,\r\n            lastName: `${data.name.last}`,\r\n            email: `${data.email}`,\r\n            username: `${data.login.username}`,\r\n            password: `${data.login.password}`,\r\n            thumbnail: `${data.picture.large}`,\r\n\r\n          }\r\n        )))\r\n        .then(items => this.setState({\r\n          items,\r\n          isLoaded: false\r\n        }))\r\n        .catch(error => console.log('parsing failed', error))\r\n    }\r\n\r\n    render() {\r\n      const {items } = this.state;\r\n        return (\r\n          <div className=\"boxWhite\">\r\n            <h2>Random User</h2>\r\n            {\r\n              items.length > 0 ? items.map(item => {\r\n              const {id, firstName, lastName, email, username, password, thumbnail} = item;\r\n               return (\r\n\r\n               <div key={id} className=\"bgCircle\">\r\n               <center><img src={thumbnail} alt={firstName} className=\"circle\"/> </center><br />\r\n               <div className=\"ctr\">\r\n                  {firstName} {lastName}<br />\r\n                  {email}<br />\r\n                  {username}<br />\r\n                  {password}<br />\r\n                </div>\r\n\r\n              </div>\r\n              );\r\n            }) : null\r\n          }\r\n          </div>\r\n        );\r\n\r\n    }\r\n  }\r\n\r\nexport default Australia;"]},"metadata":{},"sourceType":"module"}